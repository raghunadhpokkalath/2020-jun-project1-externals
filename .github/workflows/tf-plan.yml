name: "Terraform Plan"

# Trigger when a pull request is received
on:
  pull_request:

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      # Marketplace: https://github.com/marketplace/actions/checkout
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0
        
      - name: "Setup - Build AWS Credentials"
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
                
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
      - name: "Setup Environment Variables"
        run: |
          touch .env
          echo AWS_ACCESS_KEY_ID =${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY = ${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          cd terraform
          touch backend.tfvars
          printf "bucket=\"${{ secrets.S3_BUCKET_NAME }}\"" >> backend.tfvars
          printf "\nkey=\"terraform.tfstate\"" >> backend.tfvars
          printf "\nregion=\"ap-southeast-2\"" >> backend.tfvars  
          printf "your_home_network_cidr=\"${{ secrets.HOME_NETWORK_IP_CIDR }}\"" >>  terraform.tfvars
          printf "\nalb_certificate_arn= \"${{ secrets.SSL_CERTIFCATE_ARN }}\"" >> terraform.tfvars
          printf "\ndns_name =\"${{ secrets.DNS_NAME }}\"" >> terraform.tfvars
          printf "\nzone_id = \"${{ secrets.HOSTED_ZONE_ID }}\"" >> terraform.tfvars
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    
      
         
        #Init pulls credentials from the .aws/credentials file by default
      - name: "Run - Terraform plan"
        id: plan
        run: 
          make plan
      
           
      # Submit a comment with the plan output to the pull request
      - name: "Run - Terraform Comment"
        uses: actions/github-script@0.9.0
        env:
          STDOUT: "```${{ steps.plan.outputs.stdout }}```"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.STDOUT
            })
